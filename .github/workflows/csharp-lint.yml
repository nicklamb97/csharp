name: C# File Linting and Auto-Fix
on:
  push:
    branches:
      - main
    paths:
      - '**.cs'
jobs:
  lint-and-fix:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'
    - name: Get changed files
      id: changed-files
      run: |
        changed_files=$(git diff --name-only HEAD^ HEAD | grep '\.cs$' || true)
        if [ -z "$changed_files" ]; then
          echo "No .cs files changed"
          exit 0
        fi
        echo "files=$changed_files" >> $GITHUB_ENV
    - name: Create temp project and run StyleCop
      if: env.files
      run: |
        dotnet new console -n TempProject
        cd TempProject
        rm Program.cs
        dotnet add package StyleCop.Analyzers
        for file in ${{ env.files }}; do
          cp "../$file" .
        done
        dotnet build /p:TreatWarningsAsErrors=true > build_output.txt 2>&1 || true
    - name: Extract StyleCop errors
      if: env.files
      id: extract-errors
      run: |
        cd TempProject
        errors=$(grep -E ': error SA[0-9]+:' build_output.txt || true)
        if [ -z "$errors" ]; then
          echo "No StyleCop errors found"
          exit 0
        fi
        echo "errors<<EOF" >> $GITHUB_ENV
        echo "$errors" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Send errors to HuggingFace model and get fixes
      if: env.errors
      id: hf-fixes
      env:
        HF_API_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        prompt="You are a C# expert. Given StyleCop errors, suggest fixes without explanations. Provide only the corrected code snippets. StyleCop errors: ${{ env.errors | sed ':a;N;$!ba;s/\n/ /g' }}"
        
        echo "Sending prompt to HuggingFace model:"
        echo "$prompt"
        
        response=$(curl -s https://api-inference.huggingface.co/models/mistralai/Mistral-Nemo-Instruct-2407 \
          -X POST \
          -H "Authorization: Bearer $HF_API_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{\"inputs\": \"$prompt\"}")
        
        echo "Raw response from HuggingFace:"
        echo "$response"
        
        if ! fixes=$(echo "$response" | jq -r '.generated_text' 2>/dev/null); then
          echo "Error: Failed to parse JSON response from HuggingFace"
          echo "Response was: $response"
          exit 1
        fi
        
        if [ -z "$fixes" ]; then
          echo "Error: No fixes generated by the model"
          exit 1
        fi
        
        echo "fixes<<EOF" >> $GITHUB_ENV
        echo "$fixes" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    - name: Apply fixes
      if: env.fixes
      run: |
        cd TempProject
        echo "${{ env.fixes }}" > fixes.txt
        for file in *.cs; do
          awk '
            NR==FNR {
              fixes[$1] = $0
              next
            }
            {
              for (pattern in fixes) {
                if ($0 ~ pattern) {
                  print fixes[pattern]
                  next
                }
              }
              print
            }
          ' fixes.txt "$file" > "${file}.fixed"
          mv "${file}.fixed" "$file"
        done
    - name: Create new branch and push changes
      if: env.fixes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        branch_name="stylecop-fixes-$(date +%Y%m%d%H%M%S)"
        git checkout -b $branch_name
        git add .
        git commit -m "Apply StyleCop fixes" || echo "No changes to commit"
        git push -u origin $branch_name
    - name: Create Pull Request
      if: env.fixes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pr_url=$(gh pr create --title "StyleCop Fixes" --body "This PR contains automated StyleCop fixes." --base main --head $branch_name)
        echo "Pull request created: $pr_url"
