name: Lint C# Files and Create PR

on:
  push:
    branches: [ main ]
    paths:
      - '**.cs'  # This will only trigger on .cs file changes

env:
  MODEL_NAME: 'mistralai/Mistral-Nemo-Instruct-2407'
  MODEL_FILE: 'Mistral-Nemo-Instruct-2407.Q4_K_M.gguf'

jobs:
  lint_and_fix:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout C# repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get commit message
      run: |
        echo "📜 Retrieving commit message for SHA: ${{ github.sha }}"
        COMMIT_MESSAGE=$(git log --format=%B -n 1 "${{ github.sha }}")
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "✅ Commit message retrieved and stored in environment variable"

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.x'  # Use the appropriate .NET version

    - name: Install StyleCop as a NuGet package
      run: |
        echo "🔧 Adding StyleCop.Analyzers to the project..."
        dotnet add package StyleCop.Analyzers
        echo "✅ StyleCop.Analyzers added to the project"

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Run StyleCop on changed C# files
      run: |
        echo "🔍 Finding changed C# files..."
        git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep '\.cs$' | while read file; do
          echo "📄 Processing $file"
          
          # Run StyleCop and capture errors
          stylecop_output=$(dotnet build "$file" | tee /dev/stderr | grep "SA")
          
          if [ -n "$stylecop_output" ]; then
            echo "🚨 StyleCop errors found:"
            echo "$stylecop_output"
            
            # Create a prompt for the model
            prompt="You are a C# expert. Given StyleCop errors, suggest fixes without explanations. Provide only the corrected code snippets. StyleCop errors: $(echo "${stylecop_output}" | tr '\n' ' ')"

            echo "🌐 Using ilab model chat for linting..."
            fixes=$(ilab model chat --max-tokens 30000 -qq "$prompt" 2>&1)
            exit_code=$?

            echo "ilab model chat command completed with exit code: $exit_code"
            echo "$fixes"
            
            # Save the fixed code
            output_file="fixed_files/$(basename "$file")"
            mkdir -p fixed_files
            echo "$fixes" > "$output_file"
            echo "✅ Fixed code saved to $output_file"
          else
            echo "✅ No StyleCop errors found for $file"
          fi
        done

    - name: Create PR with fixed files
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔄 Cloning C# repository..."
        git clone "https://github.com/nicklamb97/csharp.git" temp_csharp
        cd temp_csharp
        
        echo "🔧 Configuring git..."
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        echo "🔀 Creating new branch for fixed files..."
        BRANCH_NAME="stylecop-fixes-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH_NAME"
        
        echo "📋 Copying fixed files..."
        cp -r ../fixed_files/* .
        git add .
        
        echo "💾 Committing changes..."
        git commit -m "Apply StyleCop fixes: ${{ env.COMMIT_MESSAGE }}" || echo "No changes to commit"
        
        echo "🚀 Pushing new branch to repository..."
        git push "https://$GITHUB_TOKEN@github.com/nicklamb97/csharp.git" "$BRANCH_NAME"
        
        echo "🔗 Creating pull request..."
        PR_URL=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/nicklamb97/csharp/pulls \
             -d "{
               \"title\": \"Automated StyleCop Fixes\",
               \"body\": \"This PR contains automated StyleCop fixes based on the following commit:\\n\\n${{ env.COMMIT_MESSAGE }}\\n\\nPlease review the fixed code and merge if appropriate.\",
               \"head\": \"$BRANCH_NAME\",
               \"base\": \"main\"
             }" | jq -r .html_url)
        
        echo "✅ Pull request created: $PR_URL"
        
        cd ..
        rm -rf temp_csharp
