name: Lint C# Files and Create PR

on:
  push:
    branches: [ main ]
    paths:
      - '**.cs'  # Trigger on .cs file changes

env:
  MODEL_NAME: 'mistralai/Mistral-Nemo-Instruct-2407'
  MODEL_FILE: 'Mistral-Nemo-Instruct-2407.Q4_K_M.gguf'

jobs:
  lint_and_fix:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout C# repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      run: |
        echo "🔍 Getting list of changed .cs files..."
        changed_files=$(git diff --name-only HEAD^ HEAD | grep '\.cs$' || true)
        if [ -z "$changed_files" ]; then
          echo "No .cs files changed"
          exit 0
        fi
        echo "Changed .cs files: $changed_files"
        echo "files=$changed_files" >> $GITHUB_OUTPUT

    - name: Install .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.x'

    - name: Create temp project for formatting
      if: steps.changed-files.outputs.files
      run: |
        echo "🔧 Creating temporary .NET project..."
        dotnet new console -n TempProject
        cd TempProject
        rm Program.cs
        echo "📄 Copying changed .cs files into TempProject..."
        for file in ${{ steps.changed-files.outputs.files }}; do
          cp "../$file" .
          echo "Copied $file"
        done

    - name: Run dotnet format
      if: steps.changed-files.outputs.files
      run: |
        echo "🔧 Running dotnet format..."
        cd TempProject
        dotnet format --verify-no-changes > format_output.log || true
        echo "📋 Format output:"
        cat format_output.log

    - name: Collect Formatting Issues
      if: steps.changed-files.outputs.files
      run: |
        echo "🔧 Collecting formatting issues..."
        mkdir -p format_issues
        cp TempProject/format_output.log format_issues/format_output.log
        echo "📋 Formatting issues collected:"
        cat format_issues/format_output.log
        for file in ${{ steps.changed-files.outputs.files }}; do
          cp "TempProject/$(basename "$file")" "format_issues/"
          echo "Collected file: $(basename "$file")"
        done

    - name: Configure StyleCop
      if: steps.changed-files.outputs.files
      run: |
        echo "🔧 Configuring StyleCop..."
        cd TempProject
        echo '{
          "$schema": "https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json",
          "settings": {
            "documentationRules": {
              "companyName": "YourCompany"
            }
          }
        }' > stylecop.json
        echo '<Project>
          <PropertyGroup>
            <GenerateDocumentationFile>true</GenerateDocumentationFile>
            <NoWarn>$(NoWarn),1591,SA1633</NoWarn>
          </PropertyGroup>
        </Project>' > Directory.Build.props
        echo "📋 StyleCop configuration complete."

    - name: Run StyleCop
      if: steps.changed-files.outputs.files
      run: |
        echo "🔧 Running StyleCop..."
        cd TempProject
        dotnet add package StyleCop.Analyzers
        dotnet build /p:TreatWarningsAsErrors=true > stylecop_output.log || true
        echo "📋 StyleCop output:"
        cat stylecop_output.log
        echo "📋 StyleCop build output collected."

    - name: Fix C# Files Using Model
      if: steps.changed-files.outputs.files
      run: |
        echo "🔍 Finding and fixing StyleCop issues..."
        mkdir -p fixed_files
        for file in ${{ steps.changed-files.outputs.files }}; do
          echo "📄 Fixing $file"

          # Capture StyleCop output for this file
          stylecop_output=$(grep "$(basename "$file")" stylecop_output.log || true)
          if [ -n "$stylecop_output" ]; then
            echo "🚨 StyleCop issues for $file:"
            echo "$stylecop_output"
            
            # Create prompt for the model
            prompt="You are a C# expert. Given the following StyleCop errors, suggest fixes without explanations. Provide only the corrected code snippets. Errors: $(echo "$stylecop_output" | tr '\n' ' ')"

            echo "🌐 Using ilab model chat for fixing..."
            fixes=$(ilab model chat --max-tokens 30000 -qq "$prompt" 2>&1)
            exit_code=$?

            echo "ilab model chat command completed with exit code: $exit_code"
            echo "📋 Fixes for $file:"
            echo "$fixes"
            
            # Save the fixed code
            output_file="fixed_files/$(basename "$file")"
            echo "$fixes" > "$output_file"
            echo "✅ Fixed code saved to $output_file"
          else
            echo "📄 No StyleCop issues found for $file"
            cp "TempProject/$(basename "$file")" "fixed_files/$(basename "$file")"
          fi
        done

    - name: Create PR with fixed files
      if: steps.changed-files.outputs.files
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔄 Cloning C# repository..."
        git clone "https://github.com/nicklamb97/csharp.git" temp_csharp
        cd temp_csharp
        
        echo "🔧 Configuring git..."
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        echo "🔀 Creating new branch for fixed files..."
        BRANCH_NAME="stylecop-fixes-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH_NAME"
        
        echo "📋 Copying fixed files..."
        cp -r ../fixed_files/* .
        git add .
        
        echo "💾 Committing changes..."
        git commit -m "Apply StyleCop fixes: ${{ env.COMMIT_MESSAGE }}" || echo "No changes to commit"
        
        echo "🚀 Pushing new branch to repository..."
        git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/nicklamb97/csharp.git" "$BRANCH_NAME"
        
        echo "🔗 Creating pull request..."
        PR_URL=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/nicklamb97/csharp/pulls \
             -d "{
               \"title\": \"Automated StyleCop Fixes\",
               \"body\": \"This PR contains automated StyleCop fixes based on the following commit:\\n\\n${{ env.COMMIT_MESSAGE }}\\n\\nPlease review the fixed code and merge if appropriate.\",
               \"head\": \"$BRANCH_NAME\",
               \"base\": \"main\"
             }" | jq -r .html_url)
        
        echo "✅ Pull request created: $PR_URL"
        
        cd ..
        rm -rf temp_csharp
